/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import java.awt.event.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import javax.swing.border.*;
import Utils.IDExporter;
import Utils.JDBC_connection;
import Utils.Scrap;
import com.jml.gorigrama.GorigramaEntity;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import javax.swing.text.Document;
import Utils.Pair;

/**
 *
 * @author jmlucero
 */
public class Definiciones extends javax.swing.JFrame {

    /**
     * Creates new form Definiciones
     */
    Document doc;
    GorigramaEntity crucigrama;
    boolean saveAllSQL = false;
    boolean editing = false;
    Executor resetStatusText = CompletableFuture.delayedExecutor(3, TimeUnit.SECONDS);

    public Definiciones() {

        initComponents();
    }

    private void scheduleResetStatus() {
        resetStatusText.execute(() -> statusJLabel.setText("STATUS"));
    }

    public Definiciones(GorigramaEntity crucigrama) {
        this();
        this.crucigrama = crucigrama;
        listarDefs();
    }

    private void cargarHorizontales(List<Pair<Integer, String>> listaH) {
        System.out.println("Cantidad de Defs Horizontales: " + listaH.size());
        String[] strings = new String[listaH.size()];
        for (int i = 0; i < strings.length; i++) {
            strings[i] = listaH.get(i).first + ". " + listaH.get(i).second;
        }
        horizontItemList1.setModel(new javax.swing.AbstractListModel<String>() {
            @Override
            public int getSize() {
                return strings.length;
            }

            @Override
            public String getElementAt(int i) {
                return strings[i];
            }
        });
    }

    private void cargarVerticales(List<Pair<Integer, String>> listaV) {
        System.out.println("Cantidad de Defs Verticales: " + listaV.size());
        String[] strings = new String[listaV.size()];
        for (int i = 0; i < strings.length; i++) {
            strings[i] = listaV.get(i).first + ". " + listaV.get(i).second;
        }
        verticalItemList.setModel(new javax.swing.AbstractListModel<String>() {
            @Override
            public int getSize() {
                return strings.length;
            }
            @Override
            public String getElementAt(int i) {
                return strings[i];
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - unknown
    private void initComponents() {
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jScrollPane3 = new JScrollPane();
        verticalItemList = new JList<>();
        jScrollPane4 = new JScrollPane();
        horizontItemList1 = new JList<>();
        jScrollPane5 = new JScrollPane();
        definitionTextPane = new JTextPane();
        jButton2 = new JButton();
        updateDB = new JButton();
        cargarDefBtn = new JButton();
        palabraSeleccionada = new JLabel();
        cargadDefsFromDB = new JButton();
        jButton4 = new JButton();
        saveToIDButton = new JButton();
        jProgressBar1 = new JProgressBar();
        saveAllCheckBox = new JCheckBox();
        editModeToggle = new JToggleButton();
        statusJLabel = new JLabel();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        var contentPane = getContentPane();

        //---- jLabel1 ----
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("HORIZONTALES");

        //---- jLabel2 ----
        jLabel2.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel2.setText("VERTICALES");

        //======== jScrollPane3 ========
        {

            //---- verticalItemList ----
            verticalItemList.setModel(new AbstractListModel<String>() {
                String[] values = {
                    "Item 1",
                    "Item 2",
                    "Item 3",
                    "Item 4",
                    "Item 5"
                };
                @Override
                public int getSize() { return values.length; }
                @Override
                public String getElementAt(int i) { return values[i]; }
            });
            verticalItemList.setValueIsAdjusting(true);
            verticalItemList.addListSelectionListener(e -> verticalItemListValueChanged(e));
            jScrollPane3.setViewportView(verticalItemList);
        }

        //======== jScrollPane4 ========
        {

            //---- horizontItemList1 ----
            horizontItemList1.setModel(new AbstractListModel<String>() {
                String[] values = {
                    "Item 1",
                    "Item 2",
                    "Item 3",
                    "Item 4",
                    "Item 5"
                };
                @Override
                public int getSize() { return values.length; }
                @Override
                public String getElementAt(int i) { return values[i]; }
            });
            horizontItemList1.setValueIsAdjusting(true);
            horizontItemList1.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    ItemClicked(e);
                }
            });
            horizontItemList1.addListSelectionListener(e -> horizontItemList1ValueChanged(e));
            jScrollPane4.setViewportView(horizontItemList1);
        }

        //======== jScrollPane5 ========
        {
            jScrollPane5.setViewportView(definitionTextPane);
        }

        //---- jButton2 ----
        jButton2.setMnemonic(83);
        jButton2.setText("Modificar");
        jButton2.addActionListener(e -> modificarDef(e));

        //---- updateDB ----
        updateDB.setText("UPDATE DB");
        updateDB.addActionListener(e -> updateDB(e));

        //---- cargarDefBtn ----
        cargarDefBtn.setText("Cargar Defs (Scrap)");
        cargarDefBtn.addActionListener(e -> cargarDefiniciones(e));

        //---- palabraSeleccionada ----
        palabraSeleccionada.setHorizontalAlignment(SwingConstants.CENTER);
        palabraSeleccionada.setText("Palabra seleccionada...");
        palabraSeleccionada.setBorder(new LineBorder(new Color(153, 153, 153), 1, true));

        //---- cargadDefsFromDB ----
        cargadDefsFromDB.setText("Cargar Definiciones from DB");
        cargadDefsFromDB.addActionListener(e -> cargadDefsFromDBActionPerformed(e));

        //---- jButton4 ----
        jButton4.setText("Scrap word");
        jButton4.addActionListener(e -> scrapWord(e));

        //---- saveToIDButton ----
        saveToIDButton.setText("SAVE TO INDESIGN");
        saveToIDButton.addActionListener(e -> saveToIDButtonActionPerformed(e));

        //---- saveAllCheckBox ----
        saveAllCheckBox.setText("Save All");
        saveAllCheckBox.setHorizontalAlignment(SwingConstants.LEFT);
        saveAllCheckBox.setHorizontalTextPosition(SwingConstants.LEFT);
        saveAllCheckBox.addItemListener(e -> saveAllCheckBoxItemStateChanged(e));

        //---- editModeToggle ----
        editModeToggle.setText("EDIT MODE");
        editModeToggle.setToolTipText("Lock load methods...");
        editModeToggle.addActionListener(e -> editModeToggleActionPerformed(e));

        //---- statusJLabel ----
        statusJLabel.setHorizontalAlignment(SwingConstants.CENTER);
        statusJLabel.setText("STATUS");

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane5)
                        .addGroup(GroupLayout.Alignment.LEADING, contentPaneLayout.createSequentialGroup()
                            .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(jButton4)
                                    .addGap(269, 269, 269)
                                    .addComponent(jButton2))
                                .addComponent(jProgressBar1, GroupLayout.PREFERRED_SIZE, 447, GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(contentPaneLayout.createParallelGroup()
                                .addComponent(saveToIDButton, GroupLayout.PREFERRED_SIZE, 212, GroupLayout.PREFERRED_SIZE)
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(updateDB)
                                    .addGap(36, 36, 36)
                                    .addComponent(saveAllCheckBox, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE))))
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGroup(contentPaneLayout.createParallelGroup()
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 311, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addGroup(contentPaneLayout.createParallelGroup()
                                        .addComponent(jScrollPane4)
                                        .addGroup(contentPaneLayout.createSequentialGroup()
                                            .addComponent(editModeToggle)
                                            .addGap(0, 0, Short.MAX_VALUE))
                                        .addComponent(palabraSeleccionada, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(statusJLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(cargarDefBtn, GroupLayout.PREFERRED_SIZE, 153, GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(cargadDefsFromDB, GroupLayout.PREFERRED_SIZE, 202, GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane3)
                                .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGap(27, 27, 27))
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(12, 12, 12)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane4, GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                        .addComponent(jScrollPane3))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(cargarDefBtn)
                        .addComponent(cargadDefsFromDB)
                        .addComponent(editModeToggle))
                    .addGap(7, 7, 7)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                        .addComponent(palabraSeleccionada, GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                        .addComponent(statusJLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane5, GroupLayout.PREFERRED_SIZE, 210, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(updateDB)
                        .addComponent(jButton4)
                        .addComponent(saveAllCheckBox))
                    .addGap(18, 18, 18)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                        .addComponent(saveToIDButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(45, 45, 45))
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    private void ItemClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItemClicked

    }//GEN-LAST:event_ItemClicked
    private void listarDefs() {
        List<String> words = new ArrayList();
        crucigrama.getHorizPairsList().forEach(t -> words.add(t.second));
        crucigrama.getVertiPairList().forEach(t -> words.add(t.second));
        words.sort((String o1, String o2) -> o1.compareTo(o2));
        words.forEach(System.out::println);
        cargarHorizontales(crucigrama.getHorizPairsList());
        cargarVerticales(crucigrama.getVertiPairList());
    }

    private void cargarDefs() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        SwingWorker sw = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                int progress = 0;
                int cant = crucigrama.getDefiniciones().size();
                for (Map.Entry<String, String> entry : crucigrama.getDefiniciones().entrySet()) {
                    try {
                        entry.setValue(Scrap.getWord(entry.getKey(), Scrap.DICT.GOOGLE));
                        progress++;
                        setProgress((progress * 100) / cant);
                    } catch (IOException e) {
                        System.out.println("DURANTE GOOGLE SCRAP: " + e);
                    }
                }
                return null;
            }
            @Override
            public void done() {
                Toolkit.getDefaultToolkit().beep();
                setCursor(null); //turn off the wait cursor
            }
        };
        sw.addPropertyChangeListener((PropertyChangeEvent evt) -> {
            if ("progress".equals(evt.getPropertyName())) {
                int progress = (Integer) evt.getNewValue();
                System.out.println("PROGRESS: " + evt.getNewValue());
                jProgressBar1.setValue(progress);
            }
        });
        sw.execute();
    }

    private void cargarDefiniciones(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarDefiniciones
        cargarDefs();
    }//GEN-LAST:event_cargarDefiniciones

    private void horizontItemList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_horizontItemList1ValueChanged
        verticalItemList.clearSelection();
        int index = horizontItemList1.getSelectedIndex();
        if (index >= 0) {
            String selectedWord = crucigrama.getHorizPairsList().get(index).second;
            palabraSeleccionada.setText(selectedWord);
            definitionTextPane.setText(crucigrama.getDefiniciones().get(selectedWord));
        }
    }//GEN-LAST:event_horizontItemList1ValueChanged

    private void verticalItemListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_verticalItemListValueChanged
        horizontItemList1.clearSelection();
        int index = verticalItemList.getSelectedIndex();
        if (index >= 0) {
            String selectedWord = crucigrama.getVertiPairList().get(index).second;
            palabraSeleccionada.setText(selectedWord);
            definitionTextPane.setText(crucigrama.getDefiniciones().get(selectedWord));
        }
    }//GEN-LAST:event_verticalItemListValueChanged


    private void modificarDef(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarDef
        crucigrama.getDefiniciones().replace(palabraSeleccionada.getText(), definitionTextPane.getText());
        statusJLabel.setText(palabraSeleccionada.getText() + " was saved locally...");
        // CompletableFuture<String> completableFuture = CompletableFuture.supplyAsync(() -> "Supply Async...");
        scheduleResetStatus();

    }//GEN-LAST:event_modificarDef

    private void updateDB(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDB
        if (saveAllSQL) {
            statusJLabel.setText("Saving all new defs to DB");
            try {

                JDBC_connection.updateAll(crucigrama.getDefiniciones());
            } catch (ClassNotFoundException | SQLException e) {
                System.out.println("EXCEPTION: " + e);
                statusJLabel.setText("Ocurrió un error al tratar de guardar defs");
            }
            statusJLabel.setText("All defs saved successfully");

        } else {
            statusJLabel.setText("Saving new def to DB");
            try {
                JDBC_connection.update(palabraSeleccionada.getText(), definitionTextPane.getText());
            } catch (ClassNotFoundException | SQLException e) {
                System.out.println("EXCEPTION: " + e);
                statusJLabel.setText("Ocurrió un error al tratar de guarda la def");
            }
            statusJLabel.setText("Def saved successfully");
        }
        scheduleResetStatus();
    }//GEN-LAST:event_updateDB

    private void cargadDefsFromDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargadDefsFromDBActionPerformed
        try {
            JDBC_connection.executeMultipleRead(crucigrama.getDefiniciones());
        } catch (Exception e) {
            System.out.println("EXCEPTION: " + e);
        }
    }//GEN-LAST:event_cargadDefsFromDBActionPerformed

    private void scrapWord(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scrapWord
        String cadena = "";
        try {
            cadena = Scrap.getWord(palabraSeleccionada.getText(), Scrap.DICT.GOOGLE);
        } catch (IOException ex) {
            Logger.getLogger(Definiciones.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        definitionTextPane.setText(cadena);

    }//GEN-LAST:event_scrapWord

    private void saveToIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToIDButtonActionPerformed
        IDExporter idExporter = new IDExporter(12, 10);
        idExporter.addTitle("HORIZONTALES");
        for (Pair<Integer, String> pair : crucigrama.getHorizPairsList()) {
            String def = crucigrama.getDefiniciones().get(pair.second.split("\n")[0]);
            idExporter.addItem(String.valueOf(pair.first), def);
        }
        idExporter.addTitle("VERTICALES");
        for (Pair<Integer, String> pair : crucigrama.getVertiPairList()) {
            String def = crucigrama.getDefiniciones().get(pair.second.split("\n")[0]);
            idExporter.addItem(String.valueOf(pair.first), def);
        }
        try {
            idExporter.saveToFile();
        } catch (IOException ex) {
            Logger.getLogger(Definiciones.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveToIDButtonActionPerformed

    private void saveAllCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_saveAllCheckBoxItemStateChanged
        System.out.println("CHECKBOX");
        saveAllSQL = saveAllCheckBox.isSelected() ? true : false; // Por las dudas evito hacer cosas como *=-1 o el operador ^=
        System.out.println("SAVE ALL STATE? : " + saveAllSQL);
    }//GEN-LAST:event_saveAllCheckBoxItemStateChanged

    public void latentEditing() {
        Timer tm = new Timer();
        TimerTask tt = new TimerTask() {
            int green = 125;
            int step = +1;

            @Override
            public void run() {
                green += step;
                if (green >= 255 || green <= 1) {
                    step *= -1;
                }
                System.out.println("green: " + green);
                editModeToggle.setBackground(new Color(125, green, 125));
            }
        };
        tm.schedule(tt, 0, 120);
    }
    private void editModeToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editModeToggleActionPerformed
        editing ^= editing;
        if (editModeToggle.isSelected()) {
            System.out.println("EDITING");
            cargadDefsFromDB.setEnabled(false);
            cargarDefBtn.setEnabled(false);
            updateDB.setEnabled(false);
            saveAllCheckBox.setEnabled(false);

        } else {
            System.out.println("UNLOCKED");
            cargadDefsFromDB.setEnabled(true);
            cargarDefBtn.setEnabled(true);
            updateDB.setEnabled(true);
            saveAllCheckBox.setEnabled(true);
            // latentEditing();
        }

    }//GEN-LAST:event_editModeToggleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Definiciones.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Definiciones.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Definiciones.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Definiciones.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Definiciones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - unknown
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JScrollPane jScrollPane3;
    private JList<String> verticalItemList;
    private JScrollPane jScrollPane4;
    private JList<String> horizontItemList1;
    private JScrollPane jScrollPane5;
    private JTextPane definitionTextPane;
    private JButton jButton2;
    private JButton updateDB;
    private JButton cargarDefBtn;
    private JLabel palabraSeleccionada;
    private JButton cargadDefsFromDB;
    private JButton jButton4;
    private JButton saveToIDButton;
    private JProgressBar jProgressBar1;
    private JCheckBox saveAllCheckBox;
    private JToggleButton editModeToggle;
    private JLabel statusJLabel;
    // End of variables declaration//GEN-END:variables
}
